/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2024-08-04 10:45:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.*;
import java.util.*;
import com.opencsv.*;

public final class displayCsv_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Peerings Configuration</title>\r\n");
      out.write("    <style>\r\n");
      out.write("        body {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: center;\r\n");
      out.write("            align-items: center;\r\n");
      out.write("            margin: 0;\r\n");
      out.write("            background-color: #f0f8ff;\r\n");
      out.write("        }\r\n");
      out.write("        .container {\r\n");
      out.write("            width: 80%;\r\n");
      out.write("            max-width: 1200px;\r\n");
      out.write("            padding: 20px;\r\n");
      out.write("            background-color: #e6e6fa;\r\n");
      out.write("            border-radius: 10px;\r\n");
      out.write("            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n");
      out.write("            display: flex;\r\n");
      out.write("            flex-direction: column;\r\n");
      out.write("            overflow-x: auto; /* Ensure horizontal scrolling if content overflows */\r\n");
      out.write("        }\r\n");
      out.write("        h1, h2 {\r\n");
      out.write("            text-align: center;\r\n");
      out.write("            color: #000080;\r\n");
      out.write("        }\r\n");
      out.write("        table {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            table-layout: auto;\r\n");
      out.write("            border-collapse: collapse;\r\n");
      out.write("            margin-bottom: 20px;\r\n");
      out.write("        }\r\n");
      out.write("        th, td {\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            text-align: left;\r\n");
      out.write("            border: 1px solid #000080; /* Ensure table borders are visible */\r\n");
      out.write("        }\r\n");
      out.write("        th {\r\n");
      out.write("            font-weight: bold;\r\n");
      out.write("        }\r\n");
      out.write("        input[type=\"text\"], input[type=\"number\"] {\r\n");
      out.write("            width: 100%;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("            border: 1px solid #ccc;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("        }\r\n");
      out.write("        input[type=\"submit\"], input[type=\"button\"] {\r\n");
      out.write("            width: 20%;\r\n");
      out.write("            padding: 10px;\r\n");
      out.write("            background-color: #000080;\r\n");
      out.write("            color: #ffffff;\r\n");
      out.write("            border: none;\r\n");
      out.write("            border-radius: 5px;\r\n");
      out.write("            cursor: pointer;\r\n");
      out.write("        }\r\n");
      out.write("        input[type=\"submit\"]:hover, input[type=\"button\"]:hover {\r\n");
      out.write("            background-color: #0000cd;\r\n");
      out.write("        }\r\n");
      out.write("        .button-container {\r\n");
      out.write("            display: flex;\r\n");
      out.write("            justify-content: space-between;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <form action=\"MyClass\" method=\"post\">\r\n");
      out.write("            <h1>Policy and Role Assignment</h1>\r\n");
      out.write("\r\n");
      out.write("            ");
 
            int numManagementGroups = Integer.parseInt(request.getParameter("numManagementGroups"));
            for (int i = 0; i < numManagementGroups; i++) { 
            
      out.write("\r\n");
      out.write("                <input type=\"hidden\" name=\"mgName");
      out.print( i );
      out.write("\" value=\"");
      out.print( request.getParameter("mgName" + i) );
      out.write("\">\r\n");
      out.write("                <input type=\"hidden\" name=\"mgDisplayName");
      out.print( i );
      out.write("\" value=\"");
      out.print( request.getParameter("mgDisplayName" + i) );
      out.write("\">\r\n");
      out.write("                <input type=\"hidden\" name=\"mgSubscriptionIds");
      out.print( i );
      out.write("\" value=\"");
      out.print( request.getParameter("mgSubscriptionIds" + i) );
      out.write("\">\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("            ");
 
            int numPeeringVNets = Integer.parseInt(request.getParameter("numPeeringVNets"));
            
      out.write("\r\n");
      out.write("            \r\n");
      out.write("            ");
 
            int numSubscriptions = Integer.parseInt(request.getParameter("numSubscriptions"));
            int[] numResourceGroups = new int[numSubscriptions];
            for (int i = 0; i < numSubscriptions; i++) {
                numResourceGroups[i] = Integer.parseInt(request.getParameter("numResourceGroups" + i));
            }
            
      out.write("\r\n");
      out.write("\r\n");
      out.write("            <input type=\"hidden\" name=\"numManagementGroups\" value=\"");
      out.print( numManagementGroups );
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"numSubscriptions\" value=\"");
      out.print( numSubscriptions );
      out.write("\">\r\n");
      out.write("            \r\n");
      out.write("            ");
      out.write("\r\n");
      out.write("            <input type=\"hidden\" name=\"clientId\" value=\"");
      out.print( request.getParameter("clientId") );
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"clientSecret\" value=\"");
      out.print( request.getParameter("clientSecret") );
      out.write("\">\r\n");
      out.write("            <input type=\"hidden\" name=\"tenantId\" value=\"");
      out.print( request.getParameter("tenantId") );
      out.write("\">\r\n");
      out.write("            \r\n");
      out.write("            ");
 for (int i = 0; i < numSubscriptions; i++) { 
      out.write("\r\n");
      out.write("                <h2>Subscription ");
      out.print( i + 1 );
      out.write("</h2>\r\n");
      out.write("                <label for=\"subscriptionId");
      out.print( i );
      out.write("\">Subscription ID ");
      out.print( i + 1 );
      out.write(":</label>\r\n");
      out.write("                <input type=\"text\" id=\"subscriptionId");
      out.print( i );
      out.write("\" name=\"subscriptionId");
      out.print( i );
      out.write("\" value=\"");
      out.print( request.getParameter("subscriptionId" + i) );
      out.write("\" required><br>\r\n");
      out.write("            \r\n");
      out.write("                <label for=\"numResourceGroups");
      out.print( i );
      out.write("\">Number of Resource Groups for Subscription ");
      out.print( i + 1 );
      out.write(":</label>\r\n");
      out.write("                <input type=\"number\" id=\"numResourceGroups");
      out.print( i );
      out.write("\" name=\"numResourceGroups");
      out.print( i );
      out.write("\" value=\"");
      out.print( request.getParameter("numResourceGroups" + i) );
      out.write("\" required><br>\r\n");
      out.write("            \r\n");
      out.write("                ");
 for (int j = 0; j < numResourceGroups[i]; j++) { 
      out.write("\r\n");
      out.write("                    <label for=\"rgName");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write("\">Resource Group Name:</label>\r\n");
      out.write("                    <input type=\"text\" id=\"rgName");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write("\" name=\"rgName");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write("\" value=\"");
      out.print( request.getParameter("rgName" + i + "_" + j) );
      out.write("\" required><br>\r\n");
      out.write("            \r\n");
      out.write("                    <label for=\"rgLocation");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write("\">Location:</label>\r\n");
      out.write("                    <input type=\"text\" id=\"rgLocation");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write("\" name=\"rgLocation");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write("\" value=\"");
      out.print( request.getParameter("rgLocation" + i + "_" + j) );
      out.write("\" required><br>\r\n");
      out.write("            \r\n");
      out.write("                    <label for=\"numVNets");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write("\">Number of VNets for Resource Group ");
      out.print( j + 1 );
      out.write(" in Subscription ");
      out.print( i + 1 );
      out.write(":</label>\r\n");
      out.write("                    <input type=\"number\" id=\"numVNets");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write("\" name=\"numVNets");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write("\" value=\"");
      out.print( request.getParameter("numVNets" + i + "_" + j) );
      out.write("\"  required><br>\r\n");
      out.write("            \r\n");
      out.write("                    ");
 for (int k = 0; k < Integer.parseInt(request.getParameter("numVNets" + i + "_" + j)); k++) { 
      out.write("\r\n");
      out.write("                        <label for=\"vnetName");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write("\">VNet Name:</label>\r\n");
      out.write("                        <input type=\"text\" id=\"vnetName");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write("\" name=\"vnetName");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write("\" value=\"");
      out.print( request.getParameter("vnetName" + i + "_" + j + "_" + k) );
      out.write("\" required><br>\r\n");
      out.write("            \r\n");
      out.write("                        <label for=\"vnetAddressSpace");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write("\">Address Space:</label>\r\n");
      out.write("                        <input type=\"text\" id=\"vnetAddressSpace");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write("\" name=\"vnetAddressSpace");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write("\" value=\"");
      out.print( request.getParameter("vnetAddressSpace" + i + "_" + j + "_" + k) );
      out.write("\" required><br>\r\n");
      out.write("            \r\n");
      out.write("                        <label for=\"numSubnets");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write("\">Number of Subnets:</label>\r\n");
      out.write("                        <input type=\"number\" id=\"numSubnets");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write("\" name=\"numSubnets");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write("\" value=\"");
      out.print( request.getParameter("numSubnets" + i + "_" + j + "_" + k) );
      out.write("\" required><br>\r\n");
      out.write("                        \r\n");
      out.write("                        ");
 for (int l = 0; l < Integer.parseInt(request.getParameter("numSubnets" + i + "_" + j + "_" + k)); l++) { 
      out.write("\r\n");
      out.write("                            <label for=\"subnetName");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write('_');
      out.print( l );
      out.write("\">Subnet Name:</label>\r\n");
      out.write("                            <input type=\"text\" id=\"subnetName");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write('_');
      out.print( l );
      out.write("\" name=\"subnetName");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write('_');
      out.print( l );
      out.write("\" value=\"");
      out.print( request.getParameter("subnetName" + i + "_" + j + "_" + k + "_" + l) );
      out.write("\" required><br>\r\n");
      out.write("                            \r\n");
      out.write("                            <label for=\"subnetAddressSpace");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write('_');
      out.print( l );
      out.write("\">Subnet Address Space:</label>\r\n");
      out.write("                            <input type=\"text\" id=\"subnetAddressSpace");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write('_');
      out.print( l );
      out.write("\" name=\"subnetAddressSpace");
      out.print( i );
      out.write('_');
      out.print( j );
      out.write('_');
      out.print( k );
      out.write('_');
      out.print( l );
      out.write("\" value=\"");
      out.print( request.getParameter("subnetAddressSpace" + i + "_" + j + "_" + k + "_" + l) );
      out.write("\" required><br>\r\n");
      out.write("                        ");
 } 
      out.write("\r\n");
      out.write("                    ");
 } 
      out.write("\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("            ");
 if (numPeeringVNets>0){
      out.write("\r\n");
      out.write("\r\n");
      out.write("                <h2>Hub VNet Configuration</h2>\r\n");
      out.write("               \r\n");
      out.write("                <label for=\"hubVNetName\">Hub VNet Name:</label>\r\n");
      out.write("                <input type=\"text\" id=\"hubVNetName\" name=\"hubVNetName\" value=\"");
      out.print( request.getParameter("hubVNetName") != null ? request.getParameter("hubVNetName") : "" );
      out.write("\" required><br>\r\n");
      out.write("            \r\n");
      out.write("                <h2>Hub to Spoke VNet Names</h2>\r\n");
      out.write("                ");
 for (int i = 0; i < numPeeringVNets; i++) { 
      out.write("\r\n");
      out.write("                    <label for=\"hubToSpokeVNetName");
      out.print( i );
      out.write("\">Hub to Spoke VNet Name ");
      out.print( i + 1 );
      out.write(":</label>\r\n");
      out.write("                    <input type=\"text\" id=\"hubToSpokeVNetName");
      out.print( i );
      out.write("\" name=\"hubToSpokeVNetName");
      out.print( i );
      out.write("\" value=\"");
      out.print( request.getParameter("hubToSpokeVNetName" + i) != null ? request.getParameter("hubToSpokeVNetName" + i) : "" );
      out.write("\" required><br>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            \r\n");
      out.write("                <h2>Peering VNets Configuration</h2>\r\n");
      out.write("                <input type=\"hidden\" name=\"numPeeringVNets\" value=\"");
      out.print( numPeeringVNets );
      out.write("\">\r\n");
      out.write("            \r\n");
      out.write("                ");
 for (int i = 0; i < numPeeringVNets; i++) { 
      out.write("\r\n");
      out.write("                    <label for=\"spokeVNetName");
      out.print( i );
      out.write("\">Spoke VNet Name:</label>\r\n");
      out.write("                    <input type=\"text\" id=\"spokeVNetName");
      out.print( i );
      out.write("\" name=\"spokeVNetName");
      out.print( i );
      out.write("\" value=\"");
      out.print( request.getParameter("spokeVNetName" + i) != null ? request.getParameter("spokeVNetName" + i) : "" );
      out.write("\" required><br>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            \r\n");
      out.write("                <h2>Spoke to Hub VNet Names</h2>\r\n");
      out.write("                ");
 for (int i = 0; i < numPeeringVNets; i++) { 
      out.write("\r\n");
      out.write("                    <label for=\"spokeToHubVNetName");
      out.print( i );
      out.write("\">Spoke to Hub VNet Name ");
      out.print( i + 1 );
      out.write(":</label>\r\n");
      out.write("                    <input type=\"text\" id=\"spokeToHubVNetName");
      out.print( i );
      out.write("\" name=\"spokeToHubVNetName");
      out.print( i );
      out.write("\" value=\"");
      out.print( request.getParameter("spokeToHubVNetName" + i) != null ? request.getParameter("spokeToHubVNetName" + i) : "" );
      out.write("\" required><br>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("                ");
}
      out.write("\r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("            <label for=\"numPolicyMgmtGroups\">Number of Management Groups Needing Policy Assignments:</label>\r\n");
      out.write("            <input type=\"number\" id=\"numPolicyMgmtGroups\" name=\"numPolicyMgmtGroups\" value=\"");
      out.print( request.getParameter("numPolicyMgmtGroups") != null ? request.getParameter("numPolicyMgmtGroups") : "" );
      out.write("\" required><br>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            ");
 
            String numPolicyMgmtGroupsStr = request.getParameter("numPolicyMgmtGroups");
            int numPolicyMgmtGroups = (numPolicyMgmtGroupsStr != null && !numPolicyMgmtGroupsStr.isEmpty()) ? Integer.parseInt(numPolicyMgmtGroupsStr) : 0;
            
            if (numPolicyMgmtGroups > 0) {
            
      out.write("\r\n");
      out.write("                ");
 for (int i = 0; i < numPolicyMgmtGroups; i++) { 
      out.write("\r\n");
      out.write("                    <label for=\"mgName");
      out.print( i );
      out.write("\">Management Group Name ");
      out.print( i + 1 );
      out.write(":</label>\r\n");
      out.write("                    <input type=\"text\" id=\"mgName");
      out.print( i );
      out.write("\" name=\"mgName");
      out.print( i );
      out.write("\" required><br>\r\n");
      out.write("                ");
 } 
      out.write("\r\n");
      out.write("            ");
 } else { 
      out.write("\r\n");
      out.write("                <p>No management groups specified.</p>\r\n");
      out.write("            ");
 } 
      out.write("\r\n");
      out.write("            <input type=\"hidden\" name=\"numPolicyMgmtGroups\" value=\"");
      out.print( numPolicyMgmtGroups );
      out.write("\">\r\n");
      out.write("\r\n");
      out.write("            <label for=\"pip\">Principle ID:</label>\r\n");
      out.write("            <input type=\"text\" name=\"principleid\" required>\r\n");
      out.write("\r\n");
      out.write("            <h2>CSV Data</h2>\r\n");
      out.write("            <table border=\"1\">\r\n");
      out.write("                <tr>\r\n");
      out.write("                    <th>Column 1</th>\r\n");
      out.write("                    <th>Column 2</th>\r\n");
      out.write("                    <th>Column 3</th>\r\n");
      out.write("                    <!-- Add more columns as per your CSV file -->\r\n");
      out.write("                </tr>\r\n");
      out.write("                ");

                    String csvFile = application.getRealPath("/WEB-INF/Policy.csv");
                    CSVReader reader = null;
                    try {
                        reader = new CSVReader(new FileReader(csvFile));
                        String[] nextLine;
                        while ((nextLine = reader.readNext()) != null) {
                            out.print("<tr>");
                            for (String cell : nextLine) {
                                out.print("<td>" + cell + "</td>");
                            }
                            out.print("</tr>");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        out.print("<tr><td colspan='3'>Error reading CSV file</td></tr>");
                    } finally {
                        if (reader != null) {
                            try {
                                reader.close();
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                
      out.write("\r\n");
      out.write("            </table>\r\n");
      out.write("\r\n");
      out.write("            <div class=\"button-container\">\r\n");
      out.write("                <input type=\"button\" value=\"Back\" onclick=\"history.back()\">\r\n");
      out.write("                <input type=\"submit\" value=\"Submit\">\r\n");
      out.write("            </div>\r\n");
      out.write("        </form>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
